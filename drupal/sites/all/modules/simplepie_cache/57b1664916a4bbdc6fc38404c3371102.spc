a:3:{s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:1:{s:4:"feed";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:36:"http://www.w3.org/XML/1998/namespace";a:2:{s:4:"base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:4:"lang";s:5:"en-gb";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:51:"Joomla! Developer - CiviCRM: Multi-language Support";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"text";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:8:"subtitle";a:1:{i:0;a:5:{s:4:"data";s:274:"Not only is Joomla! easy to use, but it is easy to add extra functionality through a flexible and powerful developer framework. The Joomla! Framework allows you to build exceptional extensions for Joomla! including components, modules, plugins, templates and language packs.";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"text";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:4:"link";a:2:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:45:"/gsoc2008/civicrm-multi-language-support.html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:1:"/";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:45:"/gsoc2008/civicrm-multi-language-support.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-10-25T00:20:11Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:9:"generator";a:1:{i:0;a:5:{s:4:"data";s:44:"Joomla! 1.5 - Open Source Content Management";s:7:"attribs";a:1:{s:0:"";a:2:{s:3:"uri";s:17:"http://joomla.org";s:7:"version";s:3:"1.5";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:5:"entry";a:9:{i:0;a:6:{s:4:"data";s:23:"
		
		
		
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:22:"Multi-language editing";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:72:"/gsoc2008/civicrm-multi-language-support/251-multi-language-editing.html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-08-18T10:58:05Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-08-18T10:58:05Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:72:"/gsoc2008/civicrm-multi-language-support/251-multi-language-editing.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:1557:"<p>The last part of my Summer of Code project was multi-langage editing of the internationalised fields. The aim of this task was to be able to edit all language versions of a given field (say, a given contact&rsquo;s first name) in a centralised place.</p>
<p>After some initial head-scratching I decided the most useful way of implementing this would be to add a small icon next to the internationalised fields in their respective editing screens; once the user clicks this icon, a small dialog with this field&rsquo;s values in all the enabled languages would pop-up and the user would be albe to adjust this field&rsquo;s value in all the languages on one go.</p>
<p>After struggling a bit with various issues, this feature is implemented using the <a href="http://dojotoolkit.org/">Dojo toolkit</a>&rsquo;s <a href="http://dojotoolkit.org/book/dojo-book-0-9/part-2-dijit/layout/dialog">Dialog widget</a>; as I didn&rsquo;t want to submit the &lsquo;underlying&rsquo; form (nor reload it after the user edits the multi-language field), the small dialog form is submitted with Ajax, this time using Dojo&rsquo;s <a href="http://dojoforum.com/2007/10/11/dojo-example-xhrget-and-xhrpost">xhrPost</a>.</p>
<p>All of these were my first times with JavaScript, Ajax and <a href="http://getfirebug.com/">Firebug</a>-powered script debugging, and I&rsquo;m must say I&rsquo;m quite impressed with the ease of use and straightforwardness of the Dojo library &ndash; a very nice finishing touch to all the great experiences accompanying Google Summer of Code.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:1557:"<p>The last part of my Summer of Code project was multi-langage editing of the internationalised fields. The aim of this task was to be able to edit all language versions of a given field (say, a given contact&rsquo;s first name) in a centralised place.</p>
<p>After some initial head-scratching I decided the most useful way of implementing this would be to add a small icon next to the internationalised fields in their respective editing screens; once the user clicks this icon, a small dialog with this field&rsquo;s values in all the enabled languages would pop-up and the user would be albe to adjust this field&rsquo;s value in all the languages on one go.</p>
<p>After struggling a bit with various issues, this feature is implemented using the <a href="http://dojotoolkit.org/">Dojo toolkit</a>&rsquo;s <a href="http://dojotoolkit.org/book/dojo-book-0-9/part-2-dijit/layout/dialog">Dialog widget</a>; as I didn&rsquo;t want to submit the &lsquo;underlying&rsquo; form (nor reload it after the user edits the multi-language field), the small dialog form is submitted with Ajax, this time using Dojo&rsquo;s <a href="http://dojoforum.com/2007/10/11/dojo-example-xhrget-and-xhrpost">xhrPost</a>.</p>
<p>All of these were my first times with JavaScript, Ajax and <a href="http://getfirebug.com/">Firebug</a>-powered script debugging, and I&rsquo;m must say I&rsquo;m quite impressed with the ease of use and straightforwardness of the Dojo library &ndash; a very nice finishing touch to all the great experiences accompanying Google Summer of Code.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}}}}i:1;a:6:{s:4:"data";s:23:"
		
		
		
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:63:"CiviCRM 2.1.alpha1 released with initial multi-language support";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:111:"/gsoc2008/civicrm-multi-language-support/229-civicrm-21alpha1-released-with-initial-multi-language-support.html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-08-07T12:42:37Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-08-07T12:42:37Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:111:"/gsoc2008/civicrm-multi-language-support/229-civicrm-21alpha1-released-with-initial-multi-language-support.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:2680:"<p>Long time no blog &ndash; partly because I was traveling in the USA most of July, partly because we were busy finishing last CiviCRM 2.1 features. That said, I&rsquo;m more than happy to announce that the core multi-language support developed during the Summer of Code project made it to the abovementioned CiviCRM version, and is part of the freshly-released CiviCRM 2.1.alpha1 (alpha1 has actually a stupid bug that makes it more of a proof-of-concept release with regards to multi-language support, but I <a href="http://fisheye.civicrm.org/changelog/CiviCRM/?cs=16495">fixed the bug</a> yesterday and alpha2 should be fully working). :)</p>
<p>As sketched previously, I ended up introducing the internationalization support on a very low level of abstraction, thus making it almost inivisible to the rest of the core development team (and any third-party coders); this way, there&rsquo;s much bigger chance everything will &lsquo;just work&rsquo; and not break when using multiple languages, and that any new contributions won&rsquo;t break on multi-language sites either.</p>
<p>Basically, the whole stack works as follows:</p>
<p>1. A new XML element was added to our database schema structure, <tt>&lt;localizable&gt;true&lt;/localizable&gt;</tt> &ndash; if any database field has this property, it will be represented by multiple, per-language columns in the final database.</p>
<p>2. For every supported language and every internationalized table, a $tablename_$locale view is created that exposes the localized columns under their &lsquo;original&rsquo; names.</p>
<p>3. Our DAO files (the auto-generated backbone of our <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a>) &lsquo;know&rsquo; whether to operate on a table directly or through a view, so if a given piece of code operates on the database through DAO it just works as before.</p>
<p>4. Any hand-crafted SQL query sooner or later passes through CRM_Core_DAO::query(), which uses regular expressions to rewrite the query and replace any internationalized table names with view names related to the currently-used language.</p>
<p>5. For every localized table, an ON INSERT trigger is created, which populates all localized columns with the contents of the column that is not-NULL; thus, if you create a new organization in English, its name will be populated in all languages &ndash; but you can then alter the Russian version to be spelt with cyrillic.</p>
<p>All in all, I&rsquo;m pretty happy with how this part of the project ended up &ndash; everything seems to &lsquo;just work&rsquo;, and doesn&rsquo;t introduce any additional maintenance burden on the others developers.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:2680:"<p>Long time no blog &ndash; partly because I was traveling in the USA most of July, partly because we were busy finishing last CiviCRM 2.1 features. That said, I&rsquo;m more than happy to announce that the core multi-language support developed during the Summer of Code project made it to the abovementioned CiviCRM version, and is part of the freshly-released CiviCRM 2.1.alpha1 (alpha1 has actually a stupid bug that makes it more of a proof-of-concept release with regards to multi-language support, but I <a href="http://fisheye.civicrm.org/changelog/CiviCRM/?cs=16495">fixed the bug</a> yesterday and alpha2 should be fully working). :)</p>
<p>As sketched previously, I ended up introducing the internationalization support on a very low level of abstraction, thus making it almost inivisible to the rest of the core development team (and any third-party coders); this way, there&rsquo;s much bigger chance everything will &lsquo;just work&rsquo; and not break when using multiple languages, and that any new contributions won&rsquo;t break on multi-language sites either.</p>
<p>Basically, the whole stack works as follows:</p>
<p>1. A new XML element was added to our database schema structure, <tt>&lt;localizable&gt;true&lt;/localizable&gt;</tt> &ndash; if any database field has this property, it will be represented by multiple, per-language columns in the final database.</p>
<p>2. For every supported language and every internationalized table, a $tablename_$locale view is created that exposes the localized columns under their &lsquo;original&rsquo; names.</p>
<p>3. Our DAO files (the auto-generated backbone of our <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a>) &lsquo;know&rsquo; whether to operate on a table directly or through a view, so if a given piece of code operates on the database through DAO it just works as before.</p>
<p>4. Any hand-crafted SQL query sooner or later passes through CRM_Core_DAO::query(), which uses regular expressions to rewrite the query and replace any internationalized table names with view names related to the currently-used language.</p>
<p>5. For every localized table, an ON INSERT trigger is created, which populates all localized columns with the contents of the column that is not-NULL; thus, if you create a new organization in English, its name will be populated in all languages &ndash; but you can then alter the Russian version to be spelt with cyrillic.</p>
<p>All in all, I&rsquo;m pretty happy with how this part of the project ended up &ndash; everything seems to &lsquo;just work&rsquo;, and doesn&rsquo;t introduce any additional maintenance burden on the others developers.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}}}}i:2;a:6:{s:4:"data";s:23:"
		
		
		
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:49:"Adjusting the code to use the view-based approach";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:99:"/gsoc2008/civicrm-multi-language-support/198-adjusting-the-code-to-use-the-view-based-approach.html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-07-18T05:44:44Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-07-18T05:44:44Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:99:"/gsoc2008/civicrm-multi-language-support/198-adjusting-the-code-to-use-the-view-based-approach.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:3343:"<p>One of the issues to solve when implementing the view-based approach described in my previous post on the topic is how to make the current codebase be aware of when to use a view and when to keep operating on a table.<br />
<br />
The problem is twofold. First, the set of tables which hold localisable data will change from release to release (we might want to localise more data in the future, or schema changes might move a localisable column to some other table), and we don&rsquo;t want have to track what table is localisable by hand; at the same time, localising all tables wouldn&rsquo;t be practical (as we really want to do that to just a couple of them). Second, it would be most useful if there was a way that would somehow automagically handle this without other CiviCRM coders having to remember to glue $dbLocale variable to the end of any hand-crafted SQL.<br />
<br />
Most of CiviCRM&rsquo;s database operations are done through an ORM mapper (DB::DataObject), and are handled by auto-generated DAO classes; it was enough to switch the template for generating these classes to make the getTableName() method return the proper view&rsquo;s name.<br />
<br />
Unfortunately, quite a bit of custom data functionality is done using hand-crafter SQL queries. There are often referenes in the same query to both localisable and non-localisable tables; the references are in all of SELECT, FROM and WHERE parts of the queries; also, quite often the resulting column names incorporate table names as prefixes, under which they are subsequently visible as object properties. Also, quite often the table names used in the queries are not literal strings, but keys in hashes which are also used elsewhere.<br />
<br />
All of the above made me scratch my head quite a bit; even if I could track down all the references to table_x (and turn them to references to table_x_$dbLocale), I still would wonder whether I didn&rsquo;t miss anything, it would be hard to grasp by any other developer (&lsquo;why does this table&rsquo;s name have something appended to it, while that doesn&rsquo;t?&rsquo;), hard to maintain, and all the people who wrote third-party extensions would have to update their code as well.<br />
<br />
All of the custom SQL queries pass through one central place, namely CRM_Core_DAO::executeQuery(); unfortunately, this function gets the query as a single string, not as a set of parameters that could be operated upon (the assumption being that it&rsquo;s used for those of the queries that DataObject can&rsquo;t handle, most often more sophisticated ones). Fortunately, after looking a bit at the queries passed through it, I managed to come up with a set of regular expressions that match the localisable table names and can replace them with view references, while at the same time skipping any of those references used in output labeling (and, thus, maintainting the PHP-side property references).<br />
<br />
This approach ends up in very small changes (basically, a couple of lines in one method call), while at the same time being &lsquo;invisible&rsquo; to other developers, who don&rsquo;t have to remember (or even know) they&rsquo;re now using localised views; unless they debug the actual SQL, it still looks (and feels) like direct table access to any code outside executeQuery() and the DAOs.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:3343:"<p>One of the issues to solve when implementing the view-based approach described in my previous post on the topic is how to make the current codebase be aware of when to use a view and when to keep operating on a table.<br />
<br />
The problem is twofold. First, the set of tables which hold localisable data will change from release to release (we might want to localise more data in the future, or schema changes might move a localisable column to some other table), and we don&rsquo;t want have to track what table is localisable by hand; at the same time, localising all tables wouldn&rsquo;t be practical (as we really want to do that to just a couple of them). Second, it would be most useful if there was a way that would somehow automagically handle this without other CiviCRM coders having to remember to glue $dbLocale variable to the end of any hand-crafted SQL.<br />
<br />
Most of CiviCRM&rsquo;s database operations are done through an ORM mapper (DB::DataObject), and are handled by auto-generated DAO classes; it was enough to switch the template for generating these classes to make the getTableName() method return the proper view&rsquo;s name.<br />
<br />
Unfortunately, quite a bit of custom data functionality is done using hand-crafter SQL queries. There are often referenes in the same query to both localisable and non-localisable tables; the references are in all of SELECT, FROM and WHERE parts of the queries; also, quite often the resulting column names incorporate table names as prefixes, under which they are subsequently visible as object properties. Also, quite often the table names used in the queries are not literal strings, but keys in hashes which are also used elsewhere.<br />
<br />
All of the above made me scratch my head quite a bit; even if I could track down all the references to table_x (and turn them to references to table_x_$dbLocale), I still would wonder whether I didn&rsquo;t miss anything, it would be hard to grasp by any other developer (&lsquo;why does this table&rsquo;s name have something appended to it, while that doesn&rsquo;t?&rsquo;), hard to maintain, and all the people who wrote third-party extensions would have to update their code as well.<br />
<br />
All of the custom SQL queries pass through one central place, namely CRM_Core_DAO::executeQuery(); unfortunately, this function gets the query as a single string, not as a set of parameters that could be operated upon (the assumption being that it&rsquo;s used for those of the queries that DataObject can&rsquo;t handle, most often more sophisticated ones). Fortunately, after looking a bit at the queries passed through it, I managed to come up with a set of regular expressions that match the localisable table names and can replace them with view references, while at the same time skipping any of those references used in output labeling (and, thus, maintainting the PHP-side property references).<br />
<br />
This approach ends up in very small changes (basically, a couple of lines in one method call), while at the same time being &lsquo;invisible&rsquo; to other developers, who don&rsquo;t have to remember (or even know) they&rsquo;re now using localised views; unless they debug the actual SQL, it still looks (and feels) like direct table access to any code outside executeQuery() and the DAOs.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}}}}i:3;a:6:{s:4:"data";s:23:"
		
		
		
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:47:"A view-based approach to multi-language CiviCRM";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:97:"/gsoc2008/civicrm-multi-language-support/162-a-view-based-approach-to-multi-language-civicrm.html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-06-30T11:25:05Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-06-30T11:25:05Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:97:"/gsoc2008/civicrm-multi-language-support/162-a-view-based-approach-to-multi-language-civicrm.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:3667:"<p>Long time no blog &ndash; mostly because my initial concept of bringing the multi-language features to CiviCRM was replaced with a brand new approach, which should be much more developer-friendly.</p>
<p>Having the contents of a CiviCRM site in multiple languages means that certain columns in the database (the user-visible ones) must be localisable &ndash; but how to implement this from the database point of view is far from obvious.</p>
<p>My initial approach was to create a single civicrm_l10n table, with columns of entity_table, entity_column, entity_id, locale and translation. This approach has the advantage of being space-efficient; if only a handful of the database&rsquo;s contents is localised in a given language, this table would hold just a couple of rows. This is also the least disruptive approach from the database&rsquo;s point of view: only one new table is introduced.</p>
<p>Unfortunately, this approach has the drawback to be much more code-disruptive &ndash; any query that retrieves database values for display must be changed to check whether there isn&rsquo;t a localised version in civicrm_l10n; any save operation would have to save to civicrm_l10n if the language is not the default one. This kind of disruption affects all the other CiviCRM developers, including the core team; evern since the introduction of this code onto the main repository, the developers would have to cater for the multilingual stuff when maintaining the codebase, and should consider internationalisation issues when writing new code.</p>
<p>The will to ease the future development of CiviCRM led my train of thought onto new tracks. What if instead of having civicrm_l10n table entries like ('civicrm_option_value', 'label', 69, 'pl_PL', 'Tłumaczenie') &ndash; which would mean that if you&rsquo;re using Polish and are trying to display the contents of the row 69 and column &lsquo;label&rsquo; from the &lsquo;civicrm_option_value&rsquo; table, then you should display &lsquo;Tłumaczenie&rsquo; instead of the original &ndash; we could stick to the current queries of simply displaying column &lsquo;label&rsquo; for row 69 of X (where X is currently civicrm_option_value)?</p>
<p>Then it hit me &ndash; what if I used MySQL views for this? It turns out this seems like a sane idea. Instead of a separate civicrm_l10n table, every column that needs to be localisable in tablename is multiplied as columnname_locale, and a new view, tablename_locale is created that makes this column appear as columnname inside of it. For the above example, instead of having civicrm_l10n table entries with entity_table of &lsquo;civicrm_option_value&rsquo; and entity_column of &lsquo;label&rsquo;, the civicrm_option_value table would simply gain label_pl_PL column and a civicrm_option_value_pl_PL view would be created that would work just like the original civicrm_option_value table, but with the label_pl_PL column visible as &lsquo;label&rsquo;.</p>
<p>This way, any code that currently operates on the civicrm_option_value table (and reads or&nbsp; writes to column label) would still work if it was only changed to operate on the civicrm_option_value_pl_PL view instead.</p>
<p>I believe this is a viable approach; when using our DAO classes, the code should refer to the _tableName property (which can be build dynamically depeding on the currently-used locale), and when creating SQL by hand, it should simply refer to civicrm_table_$locale instead of civicrm_table (where $locale holds the current locale).</p>
<p>The coming days should see the implementation of this on the gsoc-i18n branch. Stay tuned for further blog posts on how it turned out.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:3667:"<p>Long time no blog &ndash; mostly because my initial concept of bringing the multi-language features to CiviCRM was replaced with a brand new approach, which should be much more developer-friendly.</p>
<p>Having the contents of a CiviCRM site in multiple languages means that certain columns in the database (the user-visible ones) must be localisable &ndash; but how to implement this from the database point of view is far from obvious.</p>
<p>My initial approach was to create a single civicrm_l10n table, with columns of entity_table, entity_column, entity_id, locale and translation. This approach has the advantage of being space-efficient; if only a handful of the database&rsquo;s contents is localised in a given language, this table would hold just a couple of rows. This is also the least disruptive approach from the database&rsquo;s point of view: only one new table is introduced.</p>
<p>Unfortunately, this approach has the drawback to be much more code-disruptive &ndash; any query that retrieves database values for display must be changed to check whether there isn&rsquo;t a localised version in civicrm_l10n; any save operation would have to save to civicrm_l10n if the language is not the default one. This kind of disruption affects all the other CiviCRM developers, including the core team; evern since the introduction of this code onto the main repository, the developers would have to cater for the multilingual stuff when maintaining the codebase, and should consider internationalisation issues when writing new code.</p>
<p>The will to ease the future development of CiviCRM led my train of thought onto new tracks. What if instead of having civicrm_l10n table entries like ('civicrm_option_value', 'label', 69, 'pl_PL', 'Tłumaczenie') &ndash; which would mean that if you&rsquo;re using Polish and are trying to display the contents of the row 69 and column &lsquo;label&rsquo; from the &lsquo;civicrm_option_value&rsquo; table, then you should display &lsquo;Tłumaczenie&rsquo; instead of the original &ndash; we could stick to the current queries of simply displaying column &lsquo;label&rsquo; for row 69 of X (where X is currently civicrm_option_value)?</p>
<p>Then it hit me &ndash; what if I used MySQL views for this? It turns out this seems like a sane idea. Instead of a separate civicrm_l10n table, every column that needs to be localisable in tablename is multiplied as columnname_locale, and a new view, tablename_locale is created that makes this column appear as columnname inside of it. For the above example, instead of having civicrm_l10n table entries with entity_table of &lsquo;civicrm_option_value&rsquo; and entity_column of &lsquo;label&rsquo;, the civicrm_option_value table would simply gain label_pl_PL column and a civicrm_option_value_pl_PL view would be created that would work just like the original civicrm_option_value table, but with the label_pl_PL column visible as &lsquo;label&rsquo;.</p>
<p>This way, any code that currently operates on the civicrm_option_value table (and reads or&nbsp; writes to column label) would still work if it was only changed to operate on the civicrm_option_value_pl_PL view instead.</p>
<p>I believe this is a viable approach; when using our DAO classes, the code should refer to the _tableName property (which can be build dynamically depeding on the currently-used locale), and when creating SQL by hand, it should simply refer to civicrm_table_$locale instead of civicrm_table (where $locale holds the current locale).</p>
<p>The coming days should see the implementation of this on the gsoc-i18n branch. Stay tuned for further blog posts on how it turned out.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}}}}i:4;a:6:{s:4:"data";s:23:"
		
		
		
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:38:"Localisation of the new menu structure";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:88:"/gsoc2008/civicrm-multi-language-support/145-localisation-of-the-new-menu-structure.html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-06-19T17:17:40Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-06-19T17:17:40Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:88:"/gsoc2008/civicrm-multi-language-support/145-localisation-of-the-new-menu-structure.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:1937:"<p>Due to the <a href="http://civicrm.org/node/327">introduction of a new menu system</a> in CiviCRM 2.1, my summer project got one more item on its list &ndash; the localisation of the menu entries.</p>
<p>Until now, all of the localisable strings in CiviCRM were enclosed either in the PHP&rsquo;s <tt>ts(&hellip;)</tt> function calls or in Smarty&rsquo;s <tt>{ts}&hellip;{/ts}</tt> blocks. This approach was most convinient: first &ndash; the function/block call was short to type (and did not introduce a lot of noise into the code); second &ndash; making sure CiviCRM is internationalised for translation (i.e., all of its strings are localisable) was as easy as looking through the code/templates and wrapping the visible strings in the above calls; third &ndash; once we&rsquo;ve written a simple PHP/Smarty parser, creating the POT files for translators&rsquo; use was simple: just scan the code and the templates and pull out anything that&rsquo;s inside those calls.</p>
<p>This approach worked quite ok until the new menu system appeared on the scene; from CiviCRM 2.1 on, the entries in the menu are not defined in the code, but instead in the database (in the <tt>civicrm_menu</tt> table), which itself is generated from a set of XML files.</p>
<p>Fortunately, after some digging around I found out that the two methods that create the final structure for menu and page title display &ndash; <tt>CRM_Core_Menu::get()</tt> and <tt>getNaviation()</tt> &ndash; happen to keep the translatable strings in array fields keyed with <tt>title</tt>, so a <a href="http://fisheye.civicrm.org/changelog/CiviCRM/?cs=15094">method localising them in place</a> and <a href="http://fisheye.civicrm.org/changelog/CiviCRM/?cs=15096">a new POT file</a> with the menu structure (in the future, generated automatically from the abovementioned XML files) was all that was needed to make the menu localised to the currently selected language.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:1937:"<p>Due to the <a href="http://civicrm.org/node/327">introduction of a new menu system</a> in CiviCRM 2.1, my summer project got one more item on its list &ndash; the localisation of the menu entries.</p>
<p>Until now, all of the localisable strings in CiviCRM were enclosed either in the PHP&rsquo;s <tt>ts(&hellip;)</tt> function calls or in Smarty&rsquo;s <tt>{ts}&hellip;{/ts}</tt> blocks. This approach was most convinient: first &ndash; the function/block call was short to type (and did not introduce a lot of noise into the code); second &ndash; making sure CiviCRM is internationalised for translation (i.e., all of its strings are localisable) was as easy as looking through the code/templates and wrapping the visible strings in the above calls; third &ndash; once we&rsquo;ve written a simple PHP/Smarty parser, creating the POT files for translators&rsquo; use was simple: just scan the code and the templates and pull out anything that&rsquo;s inside those calls.</p>
<p>This approach worked quite ok until the new menu system appeared on the scene; from CiviCRM 2.1 on, the entries in the menu are not defined in the code, but instead in the database (in the <tt>civicrm_menu</tt> table), which itself is generated from a set of XML files.</p>
<p>Fortunately, after some digging around I found out that the two methods that create the final structure for menu and page title display &ndash; <tt>CRM_Core_Menu::get()</tt> and <tt>getNaviation()</tt> &ndash; happen to keep the translatable strings in array fields keyed with <tt>title</tt>, so a <a href="http://fisheye.civicrm.org/changelog/CiviCRM/?cs=15094">method localising them in place</a> and <a href="http://fisheye.civicrm.org/changelog/CiviCRM/?cs=15096">a new POT file</a> with the menu structure (in the future, generated automatically from the abovementioned XML files) was all that was needed to make the menu localised to the currently selected language.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}}}}i:5;a:6:{s:4:"data";s:23:"
		
		
		
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:41:"Language switching and choice persistence";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:91:"/gsoc2008/civicrm-multi-language-support/128-language-switching-and-choice-persistence.html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-06-10T14:12:01Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-06-10T14:12:01Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:91:"/gsoc2008/civicrm-multi-language-support/128-language-switching-and-choice-persistence.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:1435:"<p>As the Summer of Code coding phase got rolling, I started looking at the tasks I listed in my original description of the project.</p>
<p>The first task on the list was to make language switching in CiviCRM available to the users. This was introduced a list of links on the user&rsquo;s dashboard. As CiviCRM currently has (granted &ndash; more or less advanced&hellip;) <a href="http://translations.civicrm.org/">32 localisations</a>, it was essential that this list can be managed by the administrator of the site; this is now a part of the Administer CiviCRM &rarr; Global Settings &rarr; Localization admin screen.</p>
<p>The second task was to make the language selection permanent for a given user. Initially, I chose to use session variable to hold this information; unfortunately, this didn&rsquo;t work so well, as the language got reset to the installation&rsquo;s default on every logout.</p>
<p>As every CiviCRM user is also a contact in the given installation&rsquo;s databse, the ideal solution would be to have the language selection be a setting associated with the contact; unfortunately, per-contact settings are <a href="http://issues.civicrm.org/jira/browse/CRM-100">not yet implemented</a> in CiviCRM. Once they&rsquo;re implemented, the language chosen by the user will be stored there; for now, a simple hack was implemented to store the preference as a year-long-valid cookie in the user&rsquo;s browser.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:1435:"<p>As the Summer of Code coding phase got rolling, I started looking at the tasks I listed in my original description of the project.</p>
<p>The first task on the list was to make language switching in CiviCRM available to the users. This was introduced a list of links on the user&rsquo;s dashboard. As CiviCRM currently has (granted &ndash; more or less advanced&hellip;) <a href="http://translations.civicrm.org/">32 localisations</a>, it was essential that this list can be managed by the administrator of the site; this is now a part of the Administer CiviCRM &rarr; Global Settings &rarr; Localization admin screen.</p>
<p>The second task was to make the language selection permanent for a given user. Initially, I chose to use session variable to hold this information; unfortunately, this didn&rsquo;t work so well, as the language got reset to the installation&rsquo;s default on every logout.</p>
<p>As every CiviCRM user is also a contact in the given installation&rsquo;s databse, the ideal solution would be to have the language selection be a setting associated with the contact; unfortunately, per-contact settings are <a href="http://issues.civicrm.org/jira/browse/CRM-100">not yet implemented</a> in CiviCRM. Once they&rsquo;re implemented, the language chosen by the user will be stored there; for now, a simple hack was implemented to store the preference as a year-long-valid cookie in the user&rsquo;s browser.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}}}}i:6;a:6:{s:4:"data";s:23:"
		
		
		
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:58:"Setting up the technical infrastructure and planning ahead";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:108:"/gsoc2008/civicrm-multi-language-support/110-setting-up-the-technical-infrastructure-and-planning-ahead.html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-05-29T13:00:21Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-05-29T13:00:21Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:108:"/gsoc2008/civicrm-multi-language-support/110-setting-up-the-technical-infrastructure-and-planning-ahead.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:2680:"<p>Being one of the CiviCRM developers for the past three years, the community/boding period in my case went pretty nicely. :) As part of my regular CiviCRM activities, through most of the past month I&rsquo;ve been working on the new dedupe engine, and I&rsquo;m really happy with <a href="http://civicrm.org/node/351">the results</a> &ndash; but it&rsquo;s high time now to concentrate on my Summer of Code activities.</p>
<p>As my set of CiviCRM hats includes being the project&rsquo;s Subversion repository administrator, it was my pleasure to setup the repositories for both <a href="/gsoc2008/civicrm-aesthetics-and-usability.html">Jon</a>&rsquo;s and mine GSoC projects &ndash; the branches are <a href="http://svn.civicrm.org/civicrm/branches/gsoc-ui/">gsoc-ui</a> and <a href="http://svn.civicrm.org/civicrm/branches/gsoc-i18n/">gsoc-i18n</a>, respectively (for those interested, browsing the activities in our repository is most efficient with <a href="http://fisheye.civicrm.org/">our FishEye install</a>).</p>
<p>Given CiviCRM&rsquo;s fast release cycle (three-four releases a year), the code from the GSoC projects won&rsquo;t be a part of the upcoming CiviCRM 2.1 release, and will either be included in CiviCRM 2.2 or CiviCRM 2.3. To that end, both projects were branched from the main developer &lsquo;trunk&rsquo;, and as our main development on trunk continues, the changes happening on trunk will be merged to both GSoC branches on a ~weekly basis.</p>
<p>The decision when to include both (or either) projects&rsquo; code into CiviCRM &lsquo;proper&rsquo; will be made after we branch for CiviCRM 2.1, and will depend on the shape and the scope of the changes introduced in both projects; once we believe they&rsquo;re &lsquo;good enough&rsquo;, we&rsquo;ll start merging the changes happening on the gsoc-* branches to trunk.</p>
<p>For me personally, this week started with taking part in <a href="http://hsi.wsiz.rzeszow.pl/">a very interesting conference</a>, and was sweetened even more by winning an award for the best paper in my field there. :) Now that the conference is over and the technical infrastructure is all set up, I can finally concentrate on bringing first-class multi-language support to CiviCRM &ndash; a topic which is very close to my heart, and which makes me go back to the time when I was taking my baby steps in CiviCRM development: when I joined the team in May 2005, I joined it as a localisation/internationalisation expert. At that time, the goal was to make CiviCRM usable for people outside the English-speaking part of humanity; now it&rsquo;s high time to make it usable for multi-lanugage communities and organisations.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:2680:"<p>Being one of the CiviCRM developers for the past three years, the community/boding period in my case went pretty nicely. :) As part of my regular CiviCRM activities, through most of the past month I&rsquo;ve been working on the new dedupe engine, and I&rsquo;m really happy with <a href="http://civicrm.org/node/351">the results</a> &ndash; but it&rsquo;s high time now to concentrate on my Summer of Code activities.</p>
<p>As my set of CiviCRM hats includes being the project&rsquo;s Subversion repository administrator, it was my pleasure to setup the repositories for both <a href="/gsoc2008/civicrm-aesthetics-and-usability.html">Jon</a>&rsquo;s and mine GSoC projects &ndash; the branches are <a href="http://svn.civicrm.org/civicrm/branches/gsoc-ui/">gsoc-ui</a> and <a href="http://svn.civicrm.org/civicrm/branches/gsoc-i18n/">gsoc-i18n</a>, respectively (for those interested, browsing the activities in our repository is most efficient with <a href="http://fisheye.civicrm.org/">our FishEye install</a>).</p>
<p>Given CiviCRM&rsquo;s fast release cycle (three-four releases a year), the code from the GSoC projects won&rsquo;t be a part of the upcoming CiviCRM 2.1 release, and will either be included in CiviCRM 2.2 or CiviCRM 2.3. To that end, both projects were branched from the main developer &lsquo;trunk&rsquo;, and as our main development on trunk continues, the changes happening on trunk will be merged to both GSoC branches on a ~weekly basis.</p>
<p>The decision when to include both (or either) projects&rsquo; code into CiviCRM &lsquo;proper&rsquo; will be made after we branch for CiviCRM 2.1, and will depend on the shape and the scope of the changes introduced in both projects; once we believe they&rsquo;re &lsquo;good enough&rsquo;, we&rsquo;ll start merging the changes happening on the gsoc-* branches to trunk.</p>
<p>For me personally, this week started with taking part in <a href="http://hsi.wsiz.rzeszow.pl/">a very interesting conference</a>, and was sweetened even more by winning an award for the best paper in my field there. :) Now that the conference is over and the technical infrastructure is all set up, I can finally concentrate on bringing first-class multi-language support to CiviCRM &ndash; a topic which is very close to my heart, and which makes me go back to the time when I was taking my baby steps in CiviCRM development: when I joined the team in May 2005, I joined it as a localisation/internationalisation expert. At that time, the goal was to make CiviCRM usable for people outside the English-speaking part of humanity; now it&rsquo;s high time to make it usable for multi-lanugage communities and organisations.</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}}}}i:7;a:6:{s:4:"data";s:23:"
		
		
		
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:37:"Team: CivicCRM Multi-language Support";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:85:"/gsoc2008/civicrm-multi-language-support/34-team-civiccrm-multi-language-support.html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-04-24T21:08:54Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-04-24T21:08:54Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:85:"/gsoc2008/civicrm-multi-language-support/34-team-civiccrm-multi-language-support.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:1695:"<img class="photoleft" src="images/stories/gsoc2008/piotr.jpg" alt="Piotr Szotkowski" />
<div id="photoclear"></div>
<p>
Piotr Szotkowski is a PhD student at <a href="http://eng.pw.edu.pl/">Warsaw University of Technology</a> where he researches <i>symbolic functional decomposition method for implementation of finite state machines in FPGA devices</i>. He has developed for various non-governmental organizations, including the <a href="http://www.soros.org/about/foundations/poland">Stefan Batory Foundation</a> and the <a href="http://witryna.czasopism.pl/pl/gazeta/">Open Source Culture Foundation</a>. Piotr is well known in the CiviCRM community given his development experience, including work with internationalization and localization. He has advanced knowledge in PHP, MySQL, Ruby, PosgreSQL, xHTML and CSS.
</p>
<p><img class="photoright" src="images/stories/gsoc2008/wes.jpg" alt="Wes Morgan" /> <i>Mentor: </i>Wes Morgan is an online organizer and software developer for <a href="http://www.environmentamerica.org/">Environment America</a>. He works to get people involved in environmental advocacy in their backyard and across the US. He is also a user and contributor to open source software like <a href="http://www.webgui.org/">WebGUI</a> and <a href="http://www.civicrm.org/">CiviCRM</a>. This summer, he is working with the Joomla! GSoC team to mentor projects relating to CiviCRM (CiviCRM integrates with Joomla!). When not working or coding, Wes enjoys spending time in the Colorado Rocky Mountains hiking or skiing, and/or sampling the many delicious microbrews of the Front Range. You'll also often find him running through the park (and only sometimes being chased).</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:1695:"<img class="photoleft" src="images/stories/gsoc2008/piotr.jpg" alt="Piotr Szotkowski" />
<div id="photoclear"></div>
<p>
Piotr Szotkowski is a PhD student at <a href="http://eng.pw.edu.pl/">Warsaw University of Technology</a> where he researches <i>symbolic functional decomposition method for implementation of finite state machines in FPGA devices</i>. He has developed for various non-governmental organizations, including the <a href="http://www.soros.org/about/foundations/poland">Stefan Batory Foundation</a> and the <a href="http://witryna.czasopism.pl/pl/gazeta/">Open Source Culture Foundation</a>. Piotr is well known in the CiviCRM community given his development experience, including work with internationalization and localization. He has advanced knowledge in PHP, MySQL, Ruby, PosgreSQL, xHTML and CSS.
</p>
<p><img class="photoright" src="images/stories/gsoc2008/wes.jpg" alt="Wes Morgan" /> <i>Mentor: </i>Wes Morgan is an online organizer and software developer for <a href="http://www.environmentamerica.org/">Environment America</a>. He works to get people involved in environmental advocacy in their backyard and across the US. He is also a user and contributor to open source software like <a href="http://www.webgui.org/">WebGUI</a> and <a href="http://www.civicrm.org/">CiviCRM</a>. This summer, he is working with the Joomla! GSoC team to mentor projects relating to CiviCRM (CiviCRM integrates with Joomla!). When not working or coding, Wes enjoys spending time in the Colorado Rocky Mountains hiking or skiing, and/or sampling the many delicious microbrews of the Front Range. You'll also often find him running through the park (and only sometimes being chased).</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}}}}i:8;a:6:{s:4:"data";s:23:"
		
		
		
		
		
		
		
	";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:40:"Abstract: CiviCRM Multi-Language Support";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:87:"/gsoc2008/civicrm-multi-language-support/6-abstract-civicrm-multi-language-support.html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-04-23T04:11:34Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:20:"2008-04-23T04:11:34Z";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:87:"/gsoc2008/civicrm-multi-language-support/6-abstract-civicrm-multi-language-support.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"summary";a:1:{i:0;a:5:{s:4:"data";s:1825:"<p>CiviCRM is an open source constituent relationship management system used by NGOs and advocacy groups (like Amnesty International, Wikimedia Foundation or the Joomla! and Drupal projects) all over the world. Judging by the number of community-contributed and -maintained translations and civicrm.org statistics, CiviCRM installations exist in over twenty languages using various alphabets (Latin, Cyrillic, Arabic, Devanagari, Chinese). Multi-language support is essential in multilingual countries (like Canada or India), as well as in cross-border (e.g., Central and East European) and worldwide organizations.</p>
<p>Currently, the CiviCRM internationalization and localization features are limited to one language per installation. Extending CiviCRM with multi-language support will allow on-the-fly language switching for both static and custom (specific to a given installation) user interface elements, as well as entering and storing multiple language versions of the managed data. The implementation will utilize gettext-like translation mechanism with separate textual domains for every set of localized data (thus evading the issue of gettext not supporting translations of homonyms) and a separate table for storing . This approach ensures that the internationalization layer is mostly independent from the core CiviCRM schema, that its existence doesn&rsquo;t hamper the (relatively fast) speed of CiviCRM development and that it&rsquo;s easily adaptable to future CiviCRM features. Another benefit of such an approach is that the database/disk space for the translated strings doesn&rsquo;t have to be pre-allocated (otherwise, a ten-language site has to support a database an order of magnitude larger than a one-language install, even when most of the content is not localized to all of the languages).</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:1825:"<p>CiviCRM is an open source constituent relationship management system used by NGOs and advocacy groups (like Amnesty International, Wikimedia Foundation or the Joomla! and Drupal projects) all over the world. Judging by the number of community-contributed and -maintained translations and civicrm.org statistics, CiviCRM installations exist in over twenty languages using various alphabets (Latin, Cyrillic, Arabic, Devanagari, Chinese). Multi-language support is essential in multilingual countries (like Canada or India), as well as in cross-border (e.g., Central and East European) and worldwide organizations.</p>
<p>Currently, the CiviCRM internationalization and localization features are limited to one language per installation. Extending CiviCRM with multi-language support will allow on-the-fly language switching for both static and custom (specific to a given installation) user interface elements, as well as entering and storing multiple language versions of the managed data. The implementation will utilize gettext-like translation mechanism with separate textual domains for every set of localized data (thus evading the issue of gettext not supporting translations of homonyms) and a separate table for storing . This approach ensures that the internationalization layer is mostly independent from the core CiviCRM schema, that its existence doesn&rsquo;t hamper the (relatively fast) speed of CiviCRM development and that it&rsquo;s easily adaptable to future CiviCRM features. Another benefit of such an approach is that the database/disk space for the translated strings doesn&rsquo;t have to be pre-allocated (otherwise, a ten-language site has to support a database an order of magnitude larger than a one-language install, even when most of the content is not localized to all of the languages).</p>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:72:"http://developer.joomla.org/gsoc2008/civicrm-multi-language-support.feed";s:17:"xml_base_explicit";b:1;s:8:"xml_lang";s:5:"en-gb";}}}}}}}}}}}}s:7:"headers";a:13:{s:4:"date";s:29:"Sat, 25 Oct 2008 00:20:11 GMT";s:6:"server";s:78:"Apache/2.0.63 (Unix) mod_ssl/2.0.63 OpenSSL/0.9.7a mod_bwlimited/1.4 PHP/5.2.6";s:12:"x-powered-by";s:9:"PHP/5.2.6";s:10:"set-cookie";s:73:"e523959a7800415deda43fd5f0adee6b=2f0b5ba78712f9ed660131ec2ec8f283; path=/";s:3:"p3p";s:48:"CP=NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM";s:16:"content-encoding";s:4:"gzip";s:20:"x-content-encoded-by";s:11:"Joomla! 1.5";s:7:"expires";s:28:"Mon, 1 Jan 2001 00:00:00 GMT";s:13:"last-modified";s:29:"Sat, 25 Oct 2008 00:20:11 GMT";s:13:"cache-control";s:62:"no-store, no-cache, must-revalidate, post-check=0, pre-check=0";s:6:"pragma";s:8:"no-cache";s:17:"transfer-encoding";s:7:"chunked";s:12:"content-type";s:35:"application/atom+xml; charset=utf-8";}s:5:"build";i:20080315205903;}