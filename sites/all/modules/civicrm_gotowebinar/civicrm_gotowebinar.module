<?php
// $Id: civicrm_gotowebinar.module,v 1.1.2.1 2010/05/01 20:12:11 jalama Exp $  
/**
 * civigoto.module
 *
 * Module built to deal with the interactions that take place between CiviCRM, and GoToWebinar
 *
 * @author  Nathan Porter <nathan.porter@fmr.com>
 * @version  1.0.0
 * @module  civigoto
 */

/**
 * civigoto_civicrm_pageRun
 *
 * Called at the load of a page, and triggered only when the page being viewed is CRM_Event_Page_Event_Info. Once there, the template is alterred so that the custom group GoToWebinar is not displayed.
 *
 * @module  civigoto
 * @param  Referece $page A reference to the page being loaded.
 */
function civicrm_gotowebinar_civicrm_pageRun( &$page ) {
  //Check to confirm that the page is CRM_Event_Page_EventInfo, and if it is not, break out immediately.
  if ( $page->getVar( '_name' ) != 'CRM_Event_Page_EventInfo' ) {
    return;
  }
  //Grab the template from the page, and extract the variable that was passed as viewCustomData to the template
  $smarty  =& CRM_Core_Smarty::singleton( );
  //Check to make sure there is actually custom data going to the template.
    if ($details =& $smarty->get_template_vars( 'viewCustomData' )) {
      //Parse through the custom data looking for the GoToWebinar group. If it is found, overwrite it as NULL.
      foreach ( $details as &$detail ) {
        foreach ( $detail as &$custom ) {
          if ( $custom['title'] == 'GoToWebinar' || $custom['name'] == 'GoToWebinar' ) {
          $detail = NULL;
          break;
        }
      }
    }
    //Re-assign the details array with the NULLed GoToWebinar section  to the template so that other custom data can still be displayed, but GoToWebinar information is removed entirely.
    $smarty->assign_by_ref( 'viewCustomData', $details );
  }
  return FALSE;
}
  
/**
 * civigoto_civicrm_post
 *
 * function hook called after a participant is edited/created/deleted in the database. If dealing with creation, the function will get the webinar id associated with
 * the event, and conditionally handle the adding of the participant into GoToWebinar.
 *
 * @module  civigoto
 * @param  String $op The name of the operation bing called on an object.
 * @param  String $objectName The name of the object aka Participant.
 * @param  Integer $objectId The unique identifier of the object.
 * @param  Reference $objectRef A reference to the instance of the object being passed.
 */
function civicrm_gotowebinar_civicrm_post( $op, $objectName, $objectId, &$objectRef ) {
  //Check to see if we are creating a participant. If not, break out and don't go any further.
  if ( $objectName != 'Participant' || $op != 'create' ) {
    return FALSE;
  }
  //Retrieve the event ID that the participant has registered for.
  $event_id = $objectRef->getFieldValue('CRM_Event_DAO_Participant', $objectId, 'event_id', 'id');
  //Due to the nature of the custom webinar group and field, retrieve the table name with an obscure query relying on the group being named something involving webinar.
  $table_query = "
        SELECT c.table_name
        FROM civicrm_custom_group c
        WHERE c.name LIKE '%webinar%' LIMIT 1
        ";
        
  $table = CRM_Core_DAO::singleValueQuery( $table_query );
  //Similarly retrieve the field for the webinar ID from the custom fields table with another obscure webinar based query.
  $field_query = "
        SELECT c.column_name
        FROM civicrm_custom_field c
        WHERE c.column_name LIKE '%webinar%' LIMIT 1
        ";
  $field = CRM_Core_DAO::singleValueQuery( $field_query );
  //Retrieve the actual webinar ID associated with the event ID.
  $query = "
    SELECT $field 
    FROM $table
    WHERE entity_id = $event_id LIMIT 1
  ";
  $webinar_id = CRM_Core_DAO::singleValueQuery( $query );
  //If the event is found to have a webinar id associated with it, continue, otherwise break out now as the event does not apply to this method.
  if ( !$webinar_id || $webinar_id=='' ) {
    return FALSE;
  }
  //In order for further processing, get the contact_id associated with the created participant.
  $contact_id = $objectRef->getFieldValue('CRM_Event_DAO_Participant', $objectId, 'contact_id', 'id');
  //Make sure that we retrieved a contact ID, or else stop execution and write an error to the log.
  if ( !$contact_id ) {
    civigoto_log( 'An error occurred while trying to register participant with ID '. $objectId .' for event with ID '. $event_id .'. There was a missing contact ID for the participant. Participant not registered in GoToWebinar.', WATCHDOG_ERROR );
    return FALSE;
  }
  $email_query = "
    SELECT e.email 
    FROM civicrm_email e
    WHERE e.contact_id = $contact_id AND e.is_primary=1
  ";
  //Get the values needed for registration with GoToWebinar: First name, Last name, and email address.
  $first_name = CRM_Core_DAO::getFieldValue('CRM_Contact_DAO_Contact', $contact_id, 'first_name', 'id');
  $last_name = CRM_Core_DAO::getFieldValue('CRM_Contact_DAO_Contact', $contact_id, 'last_name', 'id');
  $email = CRM_Core_DAO::singleValueQuery( $email_query );
  //Check here to make sure that we are actually getting the required information. If we are not, stop execution, and write an error to the log.
  if ( !$first_name || !$last_name || !$email ) {
    civigoto_log( 'An error occurred while trying to register participant with ID '. $objectId .' for event with ID '. $event_id .'. There was a missing first name, last name, or email address for the participant. Participant not registered in GoToWebinar.', WATCHDOG_ERROR );
    return FALSE;
  }
  //Build up the url that will be used to register the participant in GoToWebinar
  $base = 'https://www.gotowebinar.com/en_US/island/webinar/registration.flow?';
  $query_string = '';
  $param = array(
          'Template' => 'island/webinar/registration.tmpl',
          'Form' => 'webinarRegistrationForm',
          'WebinarKey' => $webinar_id,
          'Name_First' => $first_name,
          'Name_Last' => $last_name,
          'Email' => $email,
          );
  foreach ( $param as $key => $val ) {
    $query_string .= urlencode( $key ) ."=". urlencode( $val )  ."&";
  }
  $url = trim( $base . $query_string, "&" );
  //Use cURL to execute the url we have built, triggering the registration with the user in GoToWebinar
  //----NOTE: CURLOPT_FOLLOWLOCATION is used due to the behavior of GoToWebinar in that from the supplied URL, it requires a redirection to complete registration.
  //----By allowing the cURL call to follow, registration is completed, or else it will fail.
  $ch = curl_init();
  curl_setopt( $ch, CURLOPT_RETURNTRANSFER, 1 );
  curl_setopt( $ch, CURLOPT_URL, $url );
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
  $contents = curl_exec( $ch );
  curl_close( $ch );
  //Do some logging to indicate that we have succeeded.
  //----NOTE: Logging failure would also be useful, but due to the nature of the calls, there is no good way to tell one way or another, as cURL will return data either way do to the necessary CURLOPT_FOLLOWLOCATION.
  civigoto_log( 'Participant '. $last_name .', '. $first_name .' created for event '. $event_id .' with associated Webinar ID '. $webinar_id .'.');
}

/*
 * civigoto_log
 *
 * Wrapper for the drupal logging function. Logs the given message
 *
 * @param String $msg the message to log
 * @param Mixed $level the message level to log. Defaults to DEBUG
 * @param String $type type the message type to log. Defaults to GoToWebinar
 */
function civigoto_log($msg, $level = WATCHDOG_INFO, $type = 'GoToWebinar') {
    watchdog($type, htmlentities($msg), NULL, $level);
}
